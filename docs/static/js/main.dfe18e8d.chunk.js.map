{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACG,sBAAMC,SATY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKjB,SACG,uBACGO,KAAK,OACLC,MAAOT,EACPU,SAlBiB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GACnB,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXnB,kBAebM,GAfa,4CAAH,sDCCPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACrC,OACG,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEvB,ECHyB,SAACA,GAE1B,MAA0Bd,mBAAS,CAChCqB,KAAM,GACNa,SAAS,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAZAC,qBAAU,WACPxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEpBC,YAAW,WACRJ,EAAS,CACNf,KAAMkB,EACNL,SAAS,MAEZ,UAEN,CAACpB,IAEGqB,EDjBwBM,CAAa3B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACG,qCACG,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAGOA,GAFCA,EAAIC,aEbjBiB,EAAe,WAEzB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAQA,OACG,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEM4C,EAAWpB,KAAI,SAAAT,GACZ,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MClBvC8B,IAASC,OACN,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dfe18e8d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n   // definimos la variable inputValue y se inicializa como una cadena vacia \r\n   const [inputValue, setInputValue] = useState('')\r\n\r\n   // establece el valor de inputValue con el valor del input\r\n   const handleInputChange = (e) => {\r\n      setInputValue(e.target.value)\r\n   }\r\n\r\n   // agrega una categoria desde el formulario usando setCategories\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault()\r\n      if (inputValue.trim().length > 2) {\r\n         setCategories(cats => [inputValue, ...cats])\r\n         setInputValue('')\r\n      }\r\n   }\r\n\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n         />\r\n      </form>\r\n   ) \r\n}\r\n\r\nAddCategory.propTypes = {\r\n   setCategories: PropTypes.func.isRequired\r\n}\r\n","// hacemos que nuestra funcion sea async para utilizar dentro de ella el await\r\nexport const getGifs = async (category) => {\r\n   // mandamos la query pero pasado por encodeuri para mandarlo escapado \r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uVrX260IMDJBkkAxEdwSmVziAQ8LtMYh`\r\n   const resp = await fetch(url)\r\n   const { data } = await resp.json()\r\n\r\n   // guardamos un array con los elementos que son las imagenes\r\n   const gifs = data.map(img => {\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.images.downsized_medium.url\r\n      }\r\n   })\r\n\r\n   return gifs\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n   return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n         <img src={url} alt={title} />\r\n         <p>{title}</p>\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n   // usamos el hook useFetchGifs\r\n   const {data:images, loading} = useFetchGifs(category)\r\n\r\n   return (\r\n      <>\r\n         <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n         {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n         <div className=\"card-grid\">\r\n            {\r\n               images.map(img => (\r\n                  <GifGridItem\r\n                     key={img.id}\r\n                     // mandar un objeto como propiedad\r\n                     {...img}\r\n                  />\r\n               ))\r\n            }\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n   // estado del componente funcional\r\n   const [state, setState] = useState({\r\n      data: [],\r\n      loading: true\r\n   })    \r\n\r\n   // codigo que se ejecutara cuando el componente es renderizado por primera vez\r\n   useEffect(() => {\r\n      getGifs(category).then(imgs => {\r\n         // retardamos setState para ver solo el efecto del loading\r\n         setTimeout(() => {\r\n            setState({\r\n               data: imgs,\r\n               loading: false\r\n            })\r\n         }, 1000);\r\n      })\r\n   }, [category]) // esto arregla que cuando usamos un setState el componente vuelve ejecutar el codigo raiz\r\n   \r\n   return state\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n   // usamos useState y creamos la variable categories que se inicializa con una lista\r\n   const [categories, setCategories] = useState(['One punch']);\r\n\r\n   // agrega un elemento al arreglo categories\r\n   // const handleAdd = () => {\r\n   //    // setCategories(['HunterXHunter', ...categories]);\r\n   //    setCategories(cats => [...cats, 'HunterXHunter']);\r\n   // }\r\n\r\n   return (\r\n      <>\r\n         <h2>GifExpertApp</h2>\r\n         <AddCategory setCategories={setCategories} />\r\n         <hr />\r\n\r\n         {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n         <ol>\r\n            {\r\n               categories.map(category => {\r\n                  return <GifGrid key={category} category={category} />\r\n               })\r\n            }\r\n         </ol>\r\n      </>\r\n   )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n   <GifExpertApp />,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}